1. Назвіть основні компоненти порожньої програми ASP.NET Core та опишіть їх
2. Опишіть роботу каскадного виклику методів налаштування сервера
3. Навіщо призначений клас Startup.cs? Опишіть його методи
4. Що таке конвеєр обробки запиту?
5. Що таке компонент Middleware? Опишіть стандартні компоненти Middleware
6. Розкажіть про особливості життєвого циклу Middleware
7. Які члени повинен мати клас-компонент користувача Middleware?

Відповіді на них:
Запитання 1: 
До основних компонентів порожньої програми ASP.NET Core можна віднести: 
Dependencies, Properties, appsettings.json, Connected Services, Program.cs.
Тепер по пордяку опишемо їх основний функціонал:
Dependencies - відповідає за всі пакети та бібліотеки
Properties - налаштування проекту.
appsettings - конфігурація проекту
Connected Services:підключені сервіси з Azure
Program.cs - Головний файл програми, який налаштовує та запускає застосунок.

Запитання 2:
Каскадний виклик методів налаштування сервера (Server Configuration Cascade) - це підхід, який використовується в деяких веб-фреймворках, включаючи ASP.NET Core, для налаштування різних аспектів роботи веб-сервера або додатку. 
В ASP.NET Core цей підхід дозволяє вам визначити налаштування за принципом "ланцюга відповідальності" (chain of responsibility), 
де кожен метод налаштування може доповнювати або переписувати попередні налаштування.

Запитання 3: 
Клас Startup.cs є одним з найважливіших класів у фреймворку ASP.NET Core. 
Він використовується для налаштування та конфігурації вашого ASP.NET Core додатку. 
Клас Startup визначає, які сервіси повинні бути зареєстровані, як налаштовувати конфігурацію, маршрути, і які середовища ви хочете підтримувати. 
Основні методи в класі Startup.cs включають:
ConfigureServices, Configure.

Завдання 4: 
Конвеєр обробки запиту - це набір послідовних операцій, які виконуються для кожного запиту і відповіді, 
починаючи з моменту надходження запиту від клієнта і закінчуючи відправленням відповіді клієнту.

Завдання 5: 
Компонент Middleware в ASP.NET Core - це програмна частина, яка виконує конкретну функцію в обробці HTTP-запитів та відповідей у вашому веб-додатку. 
Middleware додає функціональність до конвеєра обробки запиту (Request Pipeline) і дозволяє вам обробляти та модифікувати запити та відповіді перед тим, як вони досягнуть вашого контролера або іншого коду додатку.

Завдання 6: Життєвий цикл Middleware в ASP.NET описує послідовність подій та фаз, які кожен Middleware компонент проходить від моменту реєстрації в додатку до виконання його функціональності та видалення з конвеєра обробки запиту.
Основні фази:
Реєстрайція
Створення екземпляру
Конфігурація
Обробка запиту
Завершення роботи
Видалення

Завдання 7: Клас-компонент Middleware в ASP.NET Core повинен мати наступні члени:
Конструктор
Метод InvokeAsync або Invoke
Ланцюг виклику наступного Middleware (Next Middleware)